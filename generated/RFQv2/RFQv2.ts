// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AllowTransfer extends ethereum.Event {
  get params(): AllowTransfer__Params {
    return new AllowTransfer__Params(this);
  }
}

export class AllowTransfer__Params {
  _event: AllowTransfer;

  constructor(event: AllowTransfer) {
    this._event = event;
  }

  get spender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DepositETH extends ethereum.Event {
  get params(): DepositETH__Params {
    return new DepositETH__Params(this);
  }
}

export class DepositETH__Params {
  _event: DepositETH;

  constructor(event: DepositETH) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DisallowTransfer extends ethereum.Event {
  get params(): DisallowTransfer__Params {
    return new DisallowTransfer__Params(this);
  }
}

export class DisallowTransfer__Params {
  _event: DisallowTransfer;

  constructor(event: DisallowTransfer) {
    this._event = event;
  }

  get spender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FilledRFQ extends ethereum.Event {
  get params(): FilledRFQ__Params {
    return new FilledRFQ__Params(this);
  }
}

export class FilledRFQ__Params {
  _event: FilledRFQ;

  constructor(event: FilledRFQ) {
    this._event = event;
  }

  get offerHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get takerToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get takerTokenAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get makerToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get makerTokenAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get settleAmount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get feeFactor(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerNominated extends ethereum.Event {
  get params(): OwnerNominated__Params {
    return new OwnerNominated__Params(this);
  }
}

export class OwnerNominated__Params {
  _event: OwnerNominated;

  constructor(event: OwnerNominated) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetFeeCollector extends ethereum.Event {
  get params(): SetFeeCollector__Params {
    return new SetFeeCollector__Params(this);
  }
}

export class SetFeeCollector__Params {
  _event: SetFeeCollector;

  constructor(event: SetFeeCollector) {
    this._event = event;
  }

  get newFeeCollector(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpgradeSpender extends ethereum.Event {
  get params(): UpgradeSpender__Params {
    return new UpgradeSpender__Params(this);
  }
}

export class UpgradeSpender__Params {
  _event: UpgradeSpender;

  constructor(event: UpgradeSpender) {
    this._event = event;
  }

  get newSpender(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RFQv2 extends ethereum.SmartContract {
  static bind(address: Address): RFQv2 {
    return new RFQv2("RFQv2", address);
  }

  EIP191_HEADER(): string {
    let result = super.call("EIP191_HEADER", "EIP191_HEADER():(string)", []);

    return result[0].toString();
  }

  try_EIP191_HEADER(): ethereum.CallResult<string> {
    let result = super.tryCall("EIP191_HEADER", "EIP191_HEADER():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  EIP712_DOMAIN_NAME(): string {
    let result = super.call(
      "EIP712_DOMAIN_NAME",
      "EIP712_DOMAIN_NAME():(string)",
      [],
    );

    return result[0].toString();
  }

  try_EIP712_DOMAIN_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "EIP712_DOMAIN_NAME",
      "EIP712_DOMAIN_NAME():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  EIP712_DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "EIP712_DOMAIN_SEPARATOR",
      "EIP712_DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_EIP712_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EIP712_DOMAIN_SEPARATOR",
      "EIP712_DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EIP712_DOMAIN_VERSION(): string {
    let result = super.call(
      "EIP712_DOMAIN_VERSION",
      "EIP712_DOMAIN_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_EIP712_DOMAIN_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "EIP712_DOMAIN_VERSION",
      "EIP712_DOMAIN_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  feeCollector(): Address {
    let result = super.call("feeCollector", "feeCollector():(address)", []);

    return result[0].toAddress();
  }

  try_feeCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeCollector", "feeCollector():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isValidSignature(
    _signerAddress: Address,
    _hash: Bytes,
    _data: Bytes,
    _sig: Bytes,
  ): boolean {
    let result = super.call(
      "isValidSignature",
      "isValidSignature(address,bytes32,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_signerAddress),
        ethereum.Value.fromFixedBytes(_hash),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_sig),
      ],
    );

    return result[0].toBoolean();
  }

  try_isValidSignature(
    _signerAddress: Address,
    _hash: Bytes,
    _data: Bytes,
    _sig: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidSignature",
      "isValidSignature(address,bytes32,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_signerAddress),
        ethereum.Value.fromFixedBytes(_hash),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_sig),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nominatedOwner(): Address {
    let result = super.call("nominatedOwner", "nominatedOwner():(address)", []);

    return result[0].toAddress();
  }

  try_nominatedOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nominatedOwner",
      "nominatedOwner():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  originalChainId(): BigInt {
    let result = super.call(
      "originalChainId",
      "originalChainId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_originalChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "originalChainId",
      "originalChainId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  originalEIP712DomainSeparator(): Bytes {
    let result = super.call(
      "originalEIP712DomainSeparator",
      "originalEIP712DomainSeparator():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_originalEIP712DomainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "originalEIP712DomainSeparator",
      "originalEIP712DomainSeparator():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  permStorage(): Address {
    let result = super.call("permStorage", "permStorage():(address)", []);

    return result[0].toAddress();
  }

  try_permStorage(): ethereum.CallResult<Address> {
    let result = super.tryCall("permStorage", "permStorage():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  permit2(): Address {
    let result = super.call("permit2", "permit2():(address)", []);

    return result[0].toAddress();
  }

  try_permit2(): ethereum.CallResult<Address> {
    let result = super.tryCall("permit2", "permit2():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  spender(): Address {
    let result = super.call("spender", "spender():(address)", []);

    return result[0].toAddress();
  }

  try_spender(): ethereum.CallResult<Address> {
    let result = super.tryCall("spender", "spender():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenlonSpender(): Address {
    let result = super.call(
      "tokenlonSpender",
      "tokenlonSpender():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_tokenlonSpender(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenlonSpender",
      "tokenlonSpender():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userProxy(): Address {
    let result = super.call("userProxy", "userProxy():(address)", []);

    return result[0].toAddress();
  }

  try_userProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall("userProxy", "userProxy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _userProxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _permStorage(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _spender(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _uniswapPermit2(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _feeCollector(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class CloseAllowanceCall extends ethereum.Call {
  get inputs(): CloseAllowanceCall__Inputs {
    return new CloseAllowanceCall__Inputs(this);
  }

  get outputs(): CloseAllowanceCall__Outputs {
    return new CloseAllowanceCall__Outputs(this);
  }
}

export class CloseAllowanceCall__Inputs {
  _call: CloseAllowanceCall;

  constructor(call: CloseAllowanceCall) {
    this._call = call;
  }

  get _tokenList(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CloseAllowanceCall__Outputs {
  _call: CloseAllowanceCall;

  constructor(call: CloseAllowanceCall) {
    this._call = call;
  }
}

export class DepositETHCall extends ethereum.Call {
  get inputs(): DepositETHCall__Inputs {
    return new DepositETHCall__Inputs(this);
  }

  get outputs(): DepositETHCall__Outputs {
    return new DepositETHCall__Outputs(this);
  }
}

export class DepositETHCall__Inputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class DepositETHCall__Outputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class FillRFQCall extends ethereum.Call {
  get inputs(): FillRFQCall__Inputs {
    return new FillRFQCall__Inputs(this);
  }

  get outputs(): FillRFQCall__Outputs {
    return new FillRFQCall__Outputs(this);
  }
}

export class FillRFQCall__Inputs {
  _call: FillRFQCall;

  constructor(call: FillRFQCall) {
    this._call = call;
  }

  get order(): FillRFQCallOrderStruct {
    return changetype<FillRFQCallOrderStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get makerSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get makerTokenPermit(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get takerSignature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get takerTokenPermit(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class FillRFQCall__Outputs {
  _call: FillRFQCall;

  constructor(call: FillRFQCall) {
    this._call = call;
  }
}

export class FillRFQCallOrderStruct extends ethereum.Tuple {
  get offer(): FillRFQCallOrderOfferStruct {
    return changetype<FillRFQCallOrderOfferStruct>(this[0].toTuple());
  }

  get recipient(): Address {
    return this[1].toAddress();
  }
}

export class FillRFQCallOrderOfferStruct extends ethereum.Tuple {
  get taker(): Address {
    return this[0].toAddress();
  }

  get maker(): Address {
    return this[1].toAddress();
  }

  get takerToken(): Address {
    return this[2].toAddress();
  }

  get takerTokenAmount(): BigInt {
    return this[3].toBigInt();
  }

  get makerToken(): Address {
    return this[4].toAddress();
  }

  get makerTokenAmount(): BigInt {
    return this[5].toBigInt();
  }

  get feeFactor(): BigInt {
    return this[6].toBigInt();
  }

  get expiry(): BigInt {
    return this[7].toBigInt();
  }

  get salt(): BigInt {
    return this[8].toBigInt();
  }
}

export class NominateNewOwnerCall extends ethereum.Call {
  get inputs(): NominateNewOwnerCall__Inputs {
    return new NominateNewOwnerCall__Inputs(this);
  }

  get outputs(): NominateNewOwnerCall__Outputs {
    return new NominateNewOwnerCall__Outputs(this);
  }
}

export class NominateNewOwnerCall__Inputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class NominateNewOwnerCall__Outputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAllowanceCall extends ethereum.Call {
  get inputs(): SetAllowanceCall__Inputs {
    return new SetAllowanceCall__Inputs(this);
  }

  get outputs(): SetAllowanceCall__Outputs {
    return new SetAllowanceCall__Outputs(this);
  }
}

export class SetAllowanceCall__Inputs {
  _call: SetAllowanceCall;

  constructor(call: SetAllowanceCall) {
    this._call = call;
  }

  get _tokenList(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetAllowanceCall__Outputs {
  _call: SetAllowanceCall;

  constructor(call: SetAllowanceCall) {
    this._call = call;
  }
}

export class SetFeeCollectorCall extends ethereum.Call {
  get inputs(): SetFeeCollectorCall__Inputs {
    return new SetFeeCollectorCall__Inputs(this);
  }

  get outputs(): SetFeeCollectorCall__Outputs {
    return new SetFeeCollectorCall__Outputs(this);
  }
}

export class SetFeeCollectorCall__Inputs {
  _call: SetFeeCollectorCall;

  constructor(call: SetFeeCollectorCall) {
    this._call = call;
  }

  get _newFeeCollector(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeCollectorCall__Outputs {
  _call: SetFeeCollectorCall;

  constructor(call: SetFeeCollectorCall) {
    this._call = call;
  }
}

export class UpgradeSpenderCall extends ethereum.Call {
  get inputs(): UpgradeSpenderCall__Inputs {
    return new UpgradeSpenderCall__Inputs(this);
  }

  get outputs(): UpgradeSpenderCall__Outputs {
    return new UpgradeSpenderCall__Outputs(this);
  }
}

export class UpgradeSpenderCall__Inputs {
  _call: UpgradeSpenderCall;

  constructor(call: UpgradeSpenderCall) {
    this._call = call;
  }

  get _newSpender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeSpenderCall__Outputs {
  _call: UpgradeSpenderCall;

  constructor(call: UpgradeSpenderCall) {
    this._call = call;
  }
}
